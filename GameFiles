/**
* Note: These are just random methods for the game class
*
* List of completed methods
* play(), processAttackRequest(command), quit(command), processCommand(command)
* 
*/

private Board board;
private Deck deck;
private Player activePlayer;
private Parser parser;

private boolean deployPhase;
private boolean deployed;

private int activePlayerIndex;
private int playerCount;

private ArrayList<Player> player;


/**
 * This is the constructor for the RiskModel object.
 **/
public RiskModel() {
	dice = new Dice();
	board = new Board();

	deployed = false;
	deployPhase = false;

	players = new ArrayList<>();
	parser = new Parser();
	
	playerCount = 0;
}

/**
 * Starts the game and prints out welcome messages.
 **/
public void startGame() {
	ArrayList<String> playerNamess = new ArrayList<>();
	correctPlayersNumber = false;
	int playerCount = 0;
	//request and store number of players
	Scanner playerNumber = new Scanner(System.in);
	System.out.println("Welcome to Risk: Global Domination \n" +
			"How many players(2-6) would be playing?");
	while (correctPlayersNumber == false)
	{
		playerCount = playerNumber.nextInt();
		if (playerCount > 1 && playerCount < 7)
		{
			setNoOfPlayers(playerCount);
			correctPlayersNumber = true;
		} else
		{
			System.out.println("This game is designed for 2-6 players\n" +
					"How many players(2-6) would be playing?");

		}
	}

	//request and store player names in arrayList
	for(int i = 0; i<playerCount; i++){
		Scanner pName = new Scanner(System.in);
		System.out.println("Player " + (i+1) + " - Type in your name.");
		playerNamess.add(pName.nextLine());
	}
	init(playerNamess);
	createPlayer();
	Collections.shuffle(players);
	System.out.println("Here is the order of turns:");

	for (i = 0; i < players.size(); i++) {
		System.out.println((i + 1) + ": " + players.get(i).getName());
	}
	nextPlayer();
}

/**
 * Create players
 */
public void createPlayer(){
	System.out.println("Preparing players...");
	for (int i = 0; i < playerNames.size(); i++) {
		players.add(new Player(playerNames.get(i), 50 - (playerNames.size() * 5), i));
	}
}

/**
 * Allocates random countries to each player
 * and random armies to each country
 * allocates a random number of armies to each country
 */
public void autoDeploy(){
	deployPhase = true;
	Player player = players.get(0);
	System.out.println("Starting Auto Deployment...");
	ArrayList<Country> holdCountries = board.getCountries();
	random = new Random();
	for(int i = 0; i<holdCountries.size(); i++){
		r = random.nextInt((holdCountries.size() - i));
		if(players.size() == 2) {player = players.get(i/21);}
		else if(players.size() == 3) {player = players.get(i/14);}
		else if(players.size() == 4) {player = players.get(i/12);}
		else if(players.size() == 5) {player = players.get(i/10);}
		else if(players.size() == 6) {player = players.get(i/7);}

		if(player.getArmies()>0)
		{
			Country country = holdCountries.get(r);
			//number of armies deployed per country depends on number of armies left
			int a = 1 + random.nextInt((player.getArmies() / 5) + 1);
			country.setOccupant(player);
			country.setNumArmies(a);
			player.addCountry(country);
			System.out.println(player.getName() + " now has " + country.getArmies() + " armies deployed in " + country.getName());
			player.decrementArmies(a);

			//move already allocated country to the end
			for (int j = r; j < holdCountries.size() - 1; j++)
			{
				holdCountries.set(j, holdCountries.get(j+1));
			}
		}
		else{
			System.out.println(player.getName() + ": All your armies have been deployed");
			i++;
		}
	}
	deployed = true;
	deployPhase = false;
	System.out.println("Auto deployment complete...");
}

public boolean processCommand(Command command){
	boolean quit = false;

	String commandWord = command.getFirstWord();
	String secondWord = command.getSecondWord();

	if(commandWord.equals("state")){
		printState();
	}
	else if(commandWord.equals("pass")){
		nextPlayer();
	}
	else if(commandWord.equals("quit")){
		quit = quit(command);
	}
	else if(commandWord.equals("attack")){
		if(secondWord.equals("from")){
			attackFrom(command);
		}
		else
		{
			processAttackRequest(command);
		}
	}
	else if(commandWord.equals("fortify")){
		processFortifyRequest(command);
	}

	return quit;
	}

	public boolean quit(Command command)
	{
		if(command.hasSecondWord()) {
			System.out.println("Quit what?");
			return false;
		}
		else {
			return true;
		}
	}

	public void attackFrom(Command command){
		String country = command.getThirdWord();
		System.out.println("Attack:");
		for(int i = 0; i<board.getAdjacencies(country).size(); i++)
		{
			System.out.println(board.getAdjacencies(country).get(i).getName());
		}
		System.out.println("From " + country);
	}

	public void processAttackRequest(Command command){
        //ask user to type in "attack countryA from countryB"
		String secondWord = command.getSecondWord();
		String thirdWord = command.getThirdWord();
		String fourthWord = command.getFourthWord();
		String fifthWord = command.getFifthWord();
		String sixthWord = command.getSixthWord();

		int rollNo;
		System.out.print("How many times do you want to roll the dice? > ");
		rollNo = reader.nextInt();

		if(thirdWord == "from"){
			if(fourthWord!=null && fifthWord == null && sixthWord == null){
				if(board.isTerritory(secondWord) && board.isTerritory(fourthWord)){
					Territory attacker = board.getTerritory(fourthWord);
					Territory defender = board.getTerritory(secondWord);
					attacker.Attack(defender, rollNo, dice);
				}
			}
			else if(fourthWord!=null && fifthWord != null && sixthWord == null){
			 	String completeFourthWord = fourthWord + " " + fifthWord;
				if(board.isTerritory(secondWord) && board.isTerritory(completeFourthWord)){
					Territory attacker = board.getTerritory(completeFourthWord);
					Territory defender = board.getTerritory(secondWord);
					attacker.Attack(defender, rollNo, dice);
				}
			}
			else{
				System.out.println("Wrong Input!!! Your command should look like: \n" +
				"1. Attack CountryA from CountryB or\n " +
				"With the correct name of the country starting in  Caps\n" +
				"(eg. Egypt or Eastern Europe.)\n" +
				"type "attack from" to see which countries you can attack from which country");
			}
		}

		if(fourthWord == "from"){
			if(secondWord!=null && thirdWord!=null &&
			 	fifthWord != null && sixthWord == null){
			 	String completeSecondWord = secondWord + " " + thirdWord;
				if(board.isTerritory(completeSecondWord) && board.isTerritory(fifthWord)){
					Territory attacker = board.getTerritory(fifthWord);
					Territory defender = board.getTerritory(completeSecondWord);
					attacker.Attack(defender, rollNo, dice);
				}
			}
			else if(secondWord!=null && thirdWord!=null &&
			 	fifthWord != null && sixthWord != null){
			 	String completeSecondWord = secondWord + " " + thirdWord;
			 	String completeFifthWord = fifthWord + " " + sixthWord;
				if(board.isTerritory(completeSecondWord) && board.isTerritory(completeFifthWord)){
					Territory attacker = board.getTerritory(completeFifthWord);
					Territory defender = board.getTerritory(completeSecondWord);
					attacker.Attack(defender, rollNo, dice);
				}
			}
			else{
				System.out.println("Wrong Input!!! Your command should look like:\n" +
				""attack CountryA from CountryB\n"" +
				"With the correct name of the country starting in  Caps\n" +
				"(eg. Egypt or Eastern Europe.)\n" +
				"type "attack from" to see which countries you can attack from which country");
			}
		}
	}

	public void printState(){
		for(int i=0; i<board.getCountries().size(); i++)
		{
			System.out.println(board.getCountries().get(i).toString());
		}
	}

	public void play(){
		startGame();
		boolean finished = false;
		while(!finished){
			Command command = parser.getCommand();
			finished = processCommand(command);
		}
		System.out.println("Thank you for playing. Good bye.");
	}
	
	
